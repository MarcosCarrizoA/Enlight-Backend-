generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                                    Int               @id @default(autoincrement())
  email                                 String?           @unique(map: "email") @db.VarChar(60)
  password                              String            @db.VarChar(60)
  name                                  String            @db.VarChar(30)
  birthday                              DateTime          @db.Date
  address                               String            @db.VarChar(30)
  account_picture                       account_picture?
  account_role                          account_role[]
  account_teacher                       account_teacher[]
  chat_chat_student_account_idToaccount chat[]            @relation("chat_student_account_idToaccount")
  chat_chat_teacher_account_idToaccount chat[]            @relation("chat_teacher_account_idToaccount")
}

model account_picture {
  account_id Int     @unique(map: "account_id")
  picture_id Int     @unique(map: "picture_id")
  account    account @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_picture_ibfk_1")
  picture    picture @relation(fields: [picture_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_picture_ibfk_2")
}

model account_role {
  account_id Int
  role_id    Int
  account    account @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_role_ibfk_1")
  role       role    @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_role_ibfk_2")

  @@unique([account_id, role_id], map: "account_id")
  @@index([role_id], map: "account_role_ibfk_2")
}

model account_teacher {
  account_id Int
  teacher_id Int
  account    account @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_teacher_ibfk_1")
  teacher    teacher @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_teacher_ibfk_2")

  @@unique([account_id, teacher_id], map: "account_id")
  @@index([teacher_id], map: "teacher_id")
}

model category {
  id               Int                @id @default(autoincrement())
  name             String             @unique(map: "category_pk") @db.VarChar(60)
  category_subject category_subject[]
}

model category_subject {
  category_id Int
  subject_id  Int
  category    category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "category_subject_ibfk_1")
  subject     subject  @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "category_subject_ibfk_2")

  @@unique([category_id, subject_id], map: "category_id")
  @@index([subject_id], map: "subject_id")
}

model chat {
  student_account_id                       Int
  teacher_account_id                       Int
  account_chat_student_account_idToaccount account @relation("chat_student_account_idToaccount", fields: [student_account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "chat_ibfk_1")
  account_chat_teacher_account_idToaccount account @relation("chat_teacher_account_idToaccount", fields: [teacher_account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "chat_ibfk_2")

  @@unique([student_account_id, teacher_account_id], map: "student_account_id")
  @@index([teacher_account_id], map: "teacher_account_id")
}

model class_modality {
  id          Int           @id
  option      String        @db.VarChar(60)
  reservation reservation[]
}

model date {
  id          Int           @id @default(autoincrement())
  date        DateTime      @unique(map: "date") @db.Date
  reservation reservation[]
}

model day {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(20)
  timeslot timeslot[]
}

model picture {
  id              Int              @id @default(autoincrement())
  picture         Bytes            @db.MediumBlob
  account_picture account_picture?
}

model rating {
  id         Int     @id @default(autoincrement())
  teacher_id Int
  rating     Float
  teacher    teacher @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rating_teacher_id_fk")

  @@index([teacher_id], map: "rating_teacher_id_fk")
}

model refresh_token {
  id    Int    @id @default(autoincrement())
  token String @db.VarChar(139)
}

model reservation {
  id             Int            @id @default(autoincrement())
  account_id     Int
  timeslot_id    Int
  date_id        Int
  modality       Int
  class_modality class_modality @relation(fields: [modality], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reservations_class_modality_id_fk")
  date           date           @relation(fields: [date_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reservations_date_id_fk")
  timeslot       timeslot       @relation(fields: [timeslot_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reservations_timeslot_id_fk")

  @@index([account_id], map: "reservations_account_id_fk")
  @@index([modality], map: "reservations_class_modality_id_fk")
  @@index([date_id], map: "reservations_date_id_fk")
  @@index([timeslot_id], map: "reservations_timeslot_id_fk")
}

model role {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(30)
  account_role account_role[]
}

model subject {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(60)
  description      String             @db.Text
  price            Int
  size             Int
  modality         Int
  category_subject category_subject[]
  teacher_subject  teacher_subject[]
  timeslot         timeslot[]
}

model teacher {
  id              Int               @id @default(autoincrement())
  description     String            @db.VarChar(255)
  account_teacher account_teacher[]
  rating          rating[]
  teacher_subject teacher_subject[]
}

model teacher_subject {
  teacher_id Int
  subject_id Int
  teacher    teacher @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "teacher_subject_ibfk_1")
  subject    subject @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "teacher_subject_ibfk_2")

  @@unique([teacher_id, subject_id], map: "teacher_id")
  @@index([subject_id], map: "subject_id")
}

model time {
  id                                    Int        @id @default(autoincrement())
  time                                  DateTime   @db.Time(0)
  timeslot_timeslot_start_time_idTotime timeslot[] @relation("timeslot_start_time_idTotime")
  timeslot_timeslot_end_time_idTotime   timeslot[] @relation("timeslot_end_time_idTotime")
}

model timeslot {
  id                                Int           @id @default(autoincrement())
  subject_id                        Int
  day_id                            Int
  start_time_id                     Int
  end_time_id                       Int
  reservation                       reservation[]
  subject                           subject       @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "timeslot_ibfk_1")
  day                               day           @relation(fields: [day_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "timeslot_ibfk_2")
  time_timeslot_start_time_idTotime time          @relation("timeslot_start_time_idTotime", fields: [start_time_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "timeslot_ibfk_3")
  time_timeslot_end_time_idTotime   time          @relation("timeslot_end_time_idTotime", fields: [end_time_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "timeslot_ibfk_4")

  @@unique([subject_id, day_id, start_time_id, end_time_id], map: "subject_id")
  @@index([day_id], map: "day_id")
  @@index([start_time_id], map: "timeslot_ibfk_3")
  @@index([end_time_id], map: "timeslot_ibfk_4")
}
